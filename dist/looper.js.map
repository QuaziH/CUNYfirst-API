{"version":3,"sources":["../looper.js"],"names":["db","require","text","api","looper","query","error","response","console","rowCount","log","i","getAllSections","rows","institution","term","subject","allClasses","j","length","status","class_num","Status","e","carrier","emailError","phone","topic","twilio","err","res","emailOpen","setInterval"],"mappings":";;;;AAAA,IAAMA,KAAKC,QAAQ,YAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,QAAR,CAAb;AACA,IAAME,MAAMF,QAAQ,UAAR,CAAZ;;AAEA,IAAIG,SAAS,SAATA,MAAS,GAAM;AACfJ,OAAGK,KAAH;AAAA,2EAAoE,iBAAOC,KAAP,EAAcC,QAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAC5DD,KAD4D;AAAA;AAAA;AAAA;;AAAA,8DAErDE,QAAQF,KAAR,CAAc,uBAAd,EAAuCA,KAAvC,CAFqD;;AAAA;AAAA,kCAK7DC,SAASE,QAAT,KAAsB,CALuC;AAAA;AAAA;AAAA;;AAM5DD,oCAAQE,GAAR;AAN4D;AAAA;;AAAA;AAAA,wFAQnDC,CARmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDASjCR,IAAIS,cAAJ,MAAsBL,SAASM,IAAT,CAAcF,CAAd,EAAiBG,WAAvC,OAAyDP,SAASM,IAAT,CAAcF,CAAd,EAAiBI,IAA1E,OAAqFR,SAASM,IAAT,CAAcF,CAAd,EAAiBK,OAAtG,CATiC;;AAAA;AASpDC,0DAToD;;AAUxDjB,mDAAGK,KAAH,+EAAoFE,SAASM,IAAT,CAAcF,CAAd,EAAiBG,WAArG,sBAA+HP,SAASM,IAAT,CAAcF,CAAd,EAAiBI,IAAhJ,yBAAsKR,SAASM,IAAT,CAAcF,CAAd,EAAiBK,OAAvL,SAAmM,UAACV,KAAD,EAAQC,QAAR,EAAqB;AACpN,wDAAID,KAAJ,EAAW;AACP,+DAAOE,QAAQF,KAAR,CAAc,uBAAd,EAAuCA,KAAvC,CAAP;AACH;;AAED,yDAAK,IAAIY,IAAI,CAAb,EAAgBA,IAAIX,SAASM,IAAT,CAAcM,MAAlC,EAA0CD,GAA1C,EAA+C;AAC3C,4DAAIE,eAAJ;AACA,4DAAI;AACAA,qEAASH,WAAWV,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAA5B,EAAuCC,MAAhD;AACH,yDAFD,CAEE,OAAOC,CAAP,EAAU;AACR,gEAAIhB,SAASM,IAAT,CAAcK,CAAd,EAAiBM,OAAjB,KAA6B,cAA7B,IAA+CjB,SAASM,IAAT,CAAcK,CAAd,EAAiBM,OAAjB,KAA6B,iBAAhF,EAAmG;AAC/FtB,qEAAKuB,UAAL,MAAmBlB,SAASM,IAAT,CAAcK,CAAd,EAAiBQ,KAApC,GAA4CnB,SAASM,IAAT,CAAcK,CAAd,EAAiBM,OAA7D,kBAAsFjB,SAASM,IAAT,CAAcK,CAAd,EAAiBS,KAAvG,UAAiHpB,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAAlI;AACH,6DAFD,MAEO;AACHnB,qEAAK0B,MAAL,MAAerB,SAASM,IAAT,CAAcK,CAAd,EAAiBQ,KAAhC,4BAAiEnB,SAASM,IAAT,CAAcK,CAAd,EAAiBS,KAAlF,UAA4FpB,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAA7G;AACH;AACDrB,+DAAGK,KAAH,wCAA6CE,SAASM,IAAT,CAAcK,CAAd,EAAiBQ,KAA9D,yBAAsFnB,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAAvG,EAAoH,UAACQ,GAAD,EAAMC,GAAN,EAAc;AAC9H,oEAAID,GAAJ,EAAS;AACLrB,4EAAQF,KAAR,oCAA+CuB,GAA/C;AACH;AACJ,6DAJD;AAKA;AACH;;AAED,4DAAIT,WAAW,QAAf,EAAyB;AACrBZ,oEAAQE,GAAR,4BAAqCH,SAASM,IAAT,CAAcK,CAAd,EAAiBS,KAAtD,UAAgEpB,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAAjF;AACH,yDAFD,MAEO,IAAID,WAAW,MAAf,EAAuB;AAC1B,gEAAIb,SAASM,IAAT,CAAcK,CAAd,EAAiBM,OAAjB,KAA6B,cAA7B,IAA+CjB,SAASM,IAAT,CAAcK,CAAd,EAAiBM,OAAjB,KAA6B,iBAAhF,EAAmG;AAC/FtB,qEAAK6B,SAAL,MAAkBxB,SAASM,IAAT,CAAcK,CAAd,EAAiBQ,KAAnC,GAA2CnB,SAASM,IAAT,CAAcK,CAAd,EAAiBM,OAA5D,kBAAqFjB,SAASM,IAAT,CAAcK,CAAd,EAAiBS,KAAtG,UAAgHpB,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAAjI;AACH,6DAFD,MAEO;AACHnB,qEAAK0B,MAAL,MAAerB,SAASM,IAAT,CAAcK,CAAd,EAAiBQ,KAAhC,mCAAwEnB,SAASM,IAAT,CAAcK,CAAd,EAAiBS,KAAzF,UAAmGpB,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAApH;AACH;AACDrB,+DAAGK,KAAH,wCAA6CE,SAASM,IAAT,CAAcK,CAAd,EAAiBQ,KAA9D,yBAAsFnB,SAASM,IAAT,CAAcK,CAAd,EAAiBG,SAAvG,EAAoH,UAACQ,GAAD,EAAMC,GAAN,EAAc;AAC9H,oEAAID,GAAJ,EAAS;AACLrB,4EAAQF,KAAR,oCAA+CuB,GAA/C;AACH;AACJ,6DAJD;AAKH;AACJ;AACJ,iDAtCD;;AAVwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnDlB,6BARmD,GAQ/C,CAR+C;;AAAA;AAAA,kCAQ5CA,IAAIJ,SAASM,IAAT,CAAcM,MAR0B;AAAA;AAAA;AAAA;;AAAA,iEAQnDR,CARmD;;AAAA;AAQlBA,+BARkB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApE;;AAAA;AAAA;AAAA;AAAA;AAoDH,CArDD;;AAuDAqB,YAAY5B,MAAZ,EAAoB,MAApB","file":"looper.js","sourcesContent":["const db = require('./db/index');\nconst text = require('./text');\nconst api = require('./cf-api');\n\nlet looper = () => {\n    db.query(`SELECT DISTINCT institution, term, subject FROM classes`, async (error, response) => {\n        if (error) {\n            return console.error('Error fetching client', error);\n        }\n\n        if(response.rowCount === 0){\n            console.log(`Table is empty`);\n        } else {\n            for (let i = 0; i < response.rows.length; i++) {\n                let allClasses = await api.getAllSections(`${response.rows[i].institution}`, `${response.rows[i].term}`, `${response.rows[i].subject}`);\n                db.query(`SELECT phone, carrier, topic, class_num FROM classes WHERE institution='${response.rows[i].institution}' AND term='${response.rows[i].term}' AND subject='${response.rows[i].subject}'`, (error, response) => {\n                    if (error) {\n                        return console.error('Error fetching client', error);\n                    }\n\n                    for (let j = 0; j < response.rows.length; j++) {\n                        let status;\n                        try {\n                            status = allClasses[response.rows[j].class_num].Status;\n                        } catch (e) {\n                            if (response.rows[j].carrier === '@tmomail.net' || response.rows[j].carrier === '@mymetropcs.com') {\n                                text.emailError(`${response.rows[j].phone}${response.rows[j].carrier}`, `Your class ${response.rows[j].topic}- ${response.rows[j].class_num} does not exist in CUNYfirst anymore`);\n                            } else {\n                                text.twilio(`${response.rows[j].phone}`, `Uh oh! \\n Your class ${response.rows[j].topic}- ${response.rows[j].class_num} does not exist in CUNYfirst anymore`);\n                            }\n                            db.query(`DELETE FROM classes WHERE phone='${response.rows[j].phone}' AND class_num=${response.rows[j].class_num}`, (err, res) => {\n                                if (err) {\n                                    console.error(`Error deleting from database: ${err}`);\n                                }\n                            });\n                            continue;\n                        }\n\n                        if (status === 'Closed') {\n                            console.log(`Class is still closed ${response.rows[j].topic}- ${response.rows[j].class_num}`);\n                        } else if (status === 'Open') {\n                            if (response.rows[j].carrier === '@tmomail.net' || response.rows[j].carrier === '@mymetropcs.com') {\n                                text.emailOpen(`${response.rows[j].phone}${response.rows[j].carrier}`, `Your class ${response.rows[j].topic}- ${response.rows[j].class_num} is now open!`);\n                            } else {\n                                text.twilio(`${response.rows[j].phone}`, `Class Opened! \\n Your class ${response.rows[j].topic}- ${response.rows[j].class_num} is now open!`);\n                            }\n                            db.query(`DELETE FROM classes WHERE phone='${response.rows[j].phone}' AND class_num=${response.rows[j].class_num}`, (err, res) => {\n                                if (err) {\n                                    console.error(`Error deleting from database: ${err}`);\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n    });\n};\n\nsetInterval(looper, 300000);"]}