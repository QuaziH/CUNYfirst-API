{"version":3,"sources":["../app.js"],"names":["express","require","hbs","bodyParser","db","worker","app","registerPartials","__dirname","set","use","urlencoded","extended","json","static","get","req","res","render","term","params","inst","send","subject","post","query","body","institution","class_num","phone","carrier","error","response","console","redirect","listen","log"],"mappings":";;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,MAAMD,QAAQ,KAAR,CAAZ;AACA,IAAME,aAAaF,QAAQ,aAAR,CAAnB;AACA,IAAMG,KAAKH,QAAQ,YAAR,CAAX;AACA,IAAMI,SAASJ,QAAQ,UAAR,CAAf;;AAEA,IAAIK,MAAMN,SAAV;;AAEAE,IAAIK,gBAAJ,CAAqBC,YAAY,iBAAjC;AACAF,IAAIG,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEAH,IAAII,GAAJ,CAAQP,WAAWQ,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAN,IAAII,GAAJ,CAAQP,WAAWU,IAAX,EAAR;;AAEAP,IAAII,GAAJ,CAAQV,QAAQc,MAAR,CAAeN,YAAY,QAA3B,CAAR;;AAEAF,IAAIS,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAIC,MAAJ,CAAW,WAAX;AACH,CAFD;;AAIAZ,IAAIS,GAAJ,CAAQ,iBAAR;AAAA,uEAA2B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACNZ,OAAOc,IAAP,CAAYH,IAAII,MAAJ,CAAWC,IAAvB,CADM;;AAAA;AACnBF,4BADmB;;AAEvBF,4BAAIK,IAAJ,CAASH,IAAT;;AAFuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B;;AAAA;AAAA;AAAA;AAAA;;AAKAb,IAAIS,GAAJ,CAAQ,uBAAR;AAAA,wEAAiC,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACTZ,OAAOkB,OAAP,CAAeP,IAAII,MAAJ,CAAWC,IAA1B,EAAgCL,IAAII,MAAJ,CAAWD,IAA3C,CADS;;AAAA;AACzBI,+BADyB;;AAE7BN,4BAAIK,IAAJ,CAASC,OAAT;;AAF6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjC;;AAAA;AAAA;AAAA;AAAA;;AAKAjB,IAAIkB,IAAJ,CAAS,MAAT,EAAiB,UAACR,GAAD,EAAMC,GAAN,EAAc;AAC3Bb,OAAGqB,KAAH,CAAS,6GAAT,EACI,CAACT,IAAIU,IAAJ,CAASC,WAAV,EAAuBX,IAAIU,IAAJ,CAASP,IAAhC,EAAsCH,IAAIU,IAAJ,CAASH,OAA/C,EAAwDP,IAAIU,IAAJ,CAASE,SAAjE,EAA4EZ,IAAIU,IAAJ,CAASG,KAArF,EAA4Fb,IAAIU,IAAJ,CAASI,OAArG,CADJ,EACmH,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACpI,YAAID,KAAJ,EAAU;AACN,mBAAOE,QAAQF,KAAR,CAAc,iCAAd,EAAiDA,KAAjD,CAAP;AACH;AACJ,KALD;AAMA;;;AAGAd,QAAIiB,QAAJ,CAAa,GAAb;AACH,CAXD;;AAaA5B,IAAI6B,MAAJ,CAAW,IAAX,EAAiB,YAAU;AACvBF,YAAQG,GAAR;AACH,CAFD","file":"app.js","sourcesContent":["const express = require('express');\nconst hbs = require('hbs');\nconst bodyParser = require('body-parser');\nconst db = require('./db/index');\nconst worker = require('./worker');\n\nlet app = express();\n\nhbs.registerPartials(__dirname + '/views/partials');\napp.set('view engine', 'hbs');\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use(express.static(__dirname + 'public'));\n\napp.get('/', (req, res) => {\n    res.render('index.hbs');\n});\n\napp.get('/subjects/:inst', async (req, res) => {\n    let term = await worker.term(req.params.inst);\n    res.send(term);\n});\n\napp.get('/subjects/:inst/:term', async (req, res) => {\n    let subject = await worker.subject(req.params.inst, req.params.term);\n    res.send(subject);\n});\n\napp.post('/add', (req, res) => {\n    db.query(\"INSERT INTO classes (institution, term, subject, class_num, phone, carrier) VALUES ($1, $2, $3, $4, $5, $6)\",\n        [req.body.institution, req.body.term, req.body.subject, req.body.class_num, req.body.phone, req.body.carrier], (error, response) => {\n        if (error){\n            return console.error('Error inserting into database: ', error);\n        }\n    });\n    /********************\n    add text to email confirmation here\n    ********************/\n    res.redirect('/');\n});\n\napp.listen(3000, function(){\n    console.log(`Server started on port 3000`);\n});"]}